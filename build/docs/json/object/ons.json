{
  "fileInfo": {
    "baseName": "onsen",
    "extension": "js"
  },
  "startingLine": 18,
  "endingLine": 25,
  "codeAncestors": [],
  "docType": "object",
  "tags": {
    "tags": [
      {
        "tagDef": {
          "name": "ngdoc",
          "required": true,
          "docProperty": "docType"
        },
        "tagName": "ngdoc",
        "description": "object",
        "startingLine": 18
      },
      {
        "tagDef": {
          "name": "name",
          "required": true
        },
        "tagName": "name",
        "description": "ons",
        "startingLine": 19
      },
      {
        "tagDef": {
          "name": "category",
          "multi": true,
          "docProperty": "categories"
        },
        "tagName": "category",
        "description": "util",
        "startingLine": 20
      },
      {
        "tagDef": {
          "name": "description"
        },
        "tagName": "description",
        "description": "  [ja]Onsen UIで利用できるグローバルなオブジェクトです。このオブジェクトは、AngularJSのスコープから参照することができます。 [/ja]\n  [en]A global object that's used in Onsen UI. This object can be reached from the AngularJS scope.[/en]",
        "startingLine": 21
      }
    ],
    "tagsByName": {
      "obj": {
        "ngdoc": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "object",
            "startingLine": 18
          }
        ],
        "name": [
          {
            "tagDef": {
              "name": "name",
              "required": true
            },
            "tagName": "name",
            "description": "ons",
            "startingLine": 19
          }
        ],
        "category": [
          {
            "tagDef": {
              "name": "category",
              "multi": true,
              "docProperty": "categories"
            },
            "tagName": "category",
            "description": "util",
            "startingLine": 20
          }
        ],
        "description": [
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [ja]Onsen UIで利用できるグローバルなオブジェクトです。このオブジェクトは、AngularJSのスコープから参照することができます。 [/ja]\n  [en]A global object that's used in Onsen UI. This object can be reached from the AngularJS scope.[/en]",
            "startingLine": 21
          }
        ]
      },
      "hasProto": false
    },
    "badTags": [],
    "description": ""
  },
  "categories": [
    "util"
  ],
  "name": "ons",
  "description": "[ja]Onsen UIで利用できるグローバルなオブジェクトです。このオブジェクトは、AngularJSのスコープから参照することができます。 [/ja]\n  [en]A global object that's used in Onsen UI. This object can be reached from the AngularJS scope.[/en]",
  "area": "api",
  "module": "..",
  "priority": 0,
  "codeName": null,
  "methods": [
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 27,
      "endingLine": 36,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 27
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "ready(callback)",
            "startingLine": 28
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [ja]アプリの初期化に利用するメソッドです。渡された関数は、Onsen UIの初期化が終了している時点で必ず呼ばれます。[/ja]\n  [en]Method used to wait for app initialization. The callback will not be executed until Onsen UI has been completely initialized.[/en]",
            "startingLine": 29
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Function that executes after Onsen UI has been initialized.[/en]\n  [ja]Onsen UIが初期化が完了した後に呼び出される関数オブジェクトを指定します。[/ja]",
            "startingLine": 32,
            "typeExpression": "Function",
            "type": {
              "type": "FunctionType",
              "params": []
            },
            "typeList": [
              "Function"
            ],
            "name": "callback"
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 27
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "ready(callback)",
                "startingLine": 28
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [ja]アプリの初期化に利用するメソッドです。渡された関数は、Onsen UIの初期化が終了している時点で必ず呼ばれます。[/ja]\n  [en]Method used to wait for app initialization. The callback will not be executed until Onsen UI has been completely initialized.[/en]",
                "startingLine": 29
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Function that executes after Onsen UI has been initialized.[/en]\n  [ja]Onsen UIが初期化が完了した後に呼び出される関数オブジェクトを指定します。[/ja]",
                "startingLine": 32,
                "typeExpression": "Function",
                "type": {
                  "type": "FunctionType",
                  "params": []
                },
                "typeList": [
                  "Function"
                ],
                "name": "callback"
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "ready(callback)",
                "startingLine": 28
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "ready(callback)",
      "name": "ready",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Function that executes after Onsen UI has been initialized.[/en]\n  [ja]Onsen UIが初期化が完了した後に呼び出される関数オブジェクトを指定します。[/ja]",
          "startingLine": 32,
          "typeExpression": "Function",
          "type": {
            "type": "FunctionType",
            "params": []
          },
          "typeList": [
            "Function"
          ],
          "name": "callback"
        }
      ],
      "description": "[ja]アプリの初期化に利用するメソッドです。渡された関数は、Onsen UIの初期化が終了している時点で必ず呼ばれます。[/ja]\n  [en]Method used to wait for app initialization. The callback will not be executed until Onsen UI has been completely initialized.[/en]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 38,
      "endingLine": 54,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 38
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "bootstrap([moduleName, [dependencies]])",
            "startingLine": 39
          },
          {
            "tagDef": {
              "name": "extensionOf"
            },
            "tagName": "extensionOf",
            "description": "angular",
            "startingLine": 40
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [ja]Onsen UIの初期化を行います。Angular.jsのng-app属性を利用すること無しにOnsen UIを読み込んで初期化してくれます。[/ja]\n  [en]Initialize Onsen UI. Can be used to load Onsen UI without using the <code>ng-app</code> attribute from AngularJS.[/en]",
            "startingLine": 41
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]AngularJS module name.[/en]\n  [ja]Angular.jsでのモジュール名[/ja]",
            "startingLine": 44,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "moduleName",
            "optional": true
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]List of AngularJS module dependencies.[/en]\n  [ja]依存するAngular.jsのモジュール名の配列[/ja]",
            "startingLine": 47,
            "typeExpression": "Array",
            "type": {
              "type": "NameExpression",
              "name": "Array"
            },
            "typeList": [
              "Array"
            ],
            "name": "dependencies",
            "optional": true
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]An AngularJS module object.[/en]\n  [ja]AngularJSのModuleオブジェクトを表します。[/ja]",
            "startingLine": 50,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ]
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 38
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "bootstrap([moduleName, [dependencies]])",
                "startingLine": 39
              }
            ],
            "extensionOf": [
              {
                "tagDef": {
                  "name": "extensionOf"
                },
                "tagName": "extensionOf",
                "description": "angular",
                "startingLine": 40
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [ja]Onsen UIの初期化を行います。Angular.jsのng-app属性を利用すること無しにOnsen UIを読み込んで初期化してくれます。[/ja]\n  [en]Initialize Onsen UI. Can be used to load Onsen UI without using the <code>ng-app</code> attribute from AngularJS.[/en]",
                "startingLine": 41
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]AngularJS module name.[/en]\n  [ja]Angular.jsでのモジュール名[/ja]",
                "startingLine": 44,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "moduleName",
                "optional": true
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]List of AngularJS module dependencies.[/en]\n  [ja]依存するAngular.jsのモジュール名の配列[/ja]",
                "startingLine": 47,
                "typeExpression": "Array",
                "type": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "typeList": [
                  "Array"
                ],
                "name": "dependencies",
                "optional": true
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]An AngularJS module object.[/en]\n  [ja]AngularJSのModuleオブジェクトを表します。[/ja]",
                "startingLine": 50,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ]
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "bootstrap([moduleName, [dependencies]])",
                "startingLine": 39
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "bootstrap([moduleName, [dependencies]])",
      "extensionOf": "angular",
      "name": "bootstrap",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]AngularJS module name.[/en]\n  [ja]Angular.jsでのモジュール名[/ja]",
          "startingLine": 44,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "moduleName",
          "optional": true
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]List of AngularJS module dependencies.[/en]\n  [ja]依存するAngular.jsのモジュール名の配列[/ja]",
          "startingLine": 47,
          "typeExpression": "Array",
          "type": {
            "type": "NameExpression",
            "name": "Array"
          },
          "typeList": [
            "Array"
          ],
          "name": "dependencies",
          "optional": true
        }
      ],
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]An AngularJS module object.[/en]\n  [ja]AngularJSのModuleオブジェクトを表します。[/ja]",
        "startingLine": 50,
        "typeExpression": "Object",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "typeList": [
          "Object"
        ]
      },
      "description": "[ja]Onsen UIの初期化を行います。Angular.jsのng-app属性を利用すること無しにOnsen UIを読み込んで初期化してくれます。[/ja]\n  [en]Initialize Onsen UI. Can be used to load Onsen UI without using the <code>ng-app</code> attribute from AngularJS.[/en]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 56,
      "endingLine": 62,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 56
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "enableAutoStatusBarFill()",
            "startingLine": 57
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Enable status bar fill feature on iOS7 and above.[/en]\n  [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を有効にします。[/ja]",
            "startingLine": 58
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 56
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "enableAutoStatusBarFill()",
                "startingLine": 57
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Enable status bar fill feature on iOS7 and above.[/en]\n  [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を有効にします。[/ja]",
                "startingLine": 58
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "enableAutoStatusBarFill()",
                "startingLine": 57
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "enableAutoStatusBarFill()",
      "name": "enableAutoStatusBarFill",
      "description": "[en]Enable status bar fill feature on iOS7 and above.[/en]\n  [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を有効にします。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 64,
      "endingLine": 70,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 64
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "disableAutoStatusBarFill()",
            "startingLine": 65
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Disable status bar fill feature on iOS7 and above.[/en]\n  [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を無効にします。[/ja]",
            "startingLine": 66
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 64
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "disableAutoStatusBarFill()",
                "startingLine": 65
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Disable status bar fill feature on iOS7 and above.[/en]\n  [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を無効にします。[/ja]",
                "startingLine": 66
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "disableAutoStatusBarFill()",
                "startingLine": 65
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "disableAutoStatusBarFill()",
      "name": "disableAutoStatusBarFill",
      "description": "[en]Disable status bar fill feature on iOS7 and above.[/en]\n  [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を無効にします。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 72,
      "endingLine": 78,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 72
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "disableAnimations()",
            "startingLine": 73
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Disable all animations. Could be handy for testing and older devices.[/en]\n  [ja]アニメーションを全て無効にします。テストの際に便利です。[/ja]",
            "startingLine": 74
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 72
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "disableAnimations()",
                "startingLine": 73
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Disable all animations. Could be handy for testing and older devices.[/en]\n  [ja]アニメーションを全て無効にします。テストの際に便利です。[/ja]",
                "startingLine": 74
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "disableAnimations()",
                "startingLine": 73
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "disableAnimations()",
      "name": "disableAnimations",
      "description": "[en]Disable all animations. Could be handy for testing and older devices.[/en]\n  [ja]アニメーションを全て無効にします。テストの際に便利です。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 80,
      "endingLine": 86,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 80
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "enableAnimations()",
            "startingLine": 81
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Enable animations (default).[/en]\n  [ja]アニメーションを有効にします。[/ja]",
            "startingLine": 82
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 80
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "enableAnimations()",
                "startingLine": 81
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Enable animations (default).[/en]\n  [ja]アニメーションを有効にします。[/ja]",
                "startingLine": 82
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "enableAnimations()",
                "startingLine": 81
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "enableAnimations()",
      "name": "enableAnimations",
      "description": "[en]Enable animations (default).[/en]\n  [ja]アニメーションを有効にします。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 88,
      "endingLine": 104,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 88
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "findParentComponentUntil(name, [dom])",
            "startingLine": 89
          },
          {
            "tagDef": {
              "name": "extensionOf"
            },
            "tagName": "extensionOf",
            "description": "angular",
            "startingLine": 90
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Name of component, i.e. 'ons-page'.[/en]\n  [ja]コンポーネント名を指定します。例えばons-pageなどを指定します。[/ja]",
            "startingLine": 91,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "name"
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]$event, jqLite or HTMLElement object.[/en]\n  [ja]$eventオブジェクト、jqLiteオブジェクト、HTMLElementオブジェクトのいずれかを指定できます。[/ja]",
            "startingLine": 94,
            "typeExpression": "Object|jqLite|HTMLElement",
            "type": {
              "type": "TypeUnion",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "Object"
                },
                {
                  "type": "NameExpression",
                  "name": "jqLite"
                },
                {
                  "type": "NameExpression",
                  "name": "HTMLElement"
                }
              ]
            },
            "typeList": [
              "Object",
              "jqLite",
              "HTMLElement"
            ],
            "name": "dom",
            "optional": true
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Component object. Will return null if no component was found.[/en]\n  [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]",
            "startingLine": 97,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Find parent component object of <code>dom</code> element.[/en]\n  [ja]指定されたdom引数の親要素をたどってコンポーネントを検索します。[/ja]",
            "startingLine": 100
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 88
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "findParentComponentUntil(name, [dom])",
                "startingLine": 89
              }
            ],
            "extensionOf": [
              {
                "tagDef": {
                  "name": "extensionOf"
                },
                "tagName": "extensionOf",
                "description": "angular",
                "startingLine": 90
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Name of component, i.e. 'ons-page'.[/en]\n  [ja]コンポーネント名を指定します。例えばons-pageなどを指定します。[/ja]",
                "startingLine": 91,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "name"
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]$event, jqLite or HTMLElement object.[/en]\n  [ja]$eventオブジェクト、jqLiteオブジェクト、HTMLElementオブジェクトのいずれかを指定できます。[/ja]",
                "startingLine": 94,
                "typeExpression": "Object|jqLite|HTMLElement",
                "type": {
                  "type": "TypeUnion",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    {
                      "type": "NameExpression",
                      "name": "jqLite"
                    },
                    {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  ]
                },
                "typeList": [
                  "Object",
                  "jqLite",
                  "HTMLElement"
                ],
                "name": "dom",
                "optional": true
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Component object. Will return null if no component was found.[/en]\n  [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]",
                "startingLine": 97,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Find parent component object of <code>dom</code> element.[/en]\n  [ja]指定されたdom引数の親要素をたどってコンポーネントを検索します。[/ja]",
                "startingLine": 100
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "findParentComponentUntil(name, [dom])",
                "startingLine": 89
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "findParentComponentUntil(name, [dom])",
      "extensionOf": "angular",
      "name": "findParentComponentUntil",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Name of component, i.e. 'ons-page'.[/en]\n  [ja]コンポーネント名を指定します。例えばons-pageなどを指定します。[/ja]",
          "startingLine": 91,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "name"
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]$event, jqLite or HTMLElement object.[/en]\n  [ja]$eventオブジェクト、jqLiteオブジェクト、HTMLElementオブジェクトのいずれかを指定できます。[/ja]",
          "startingLine": 94,
          "typeExpression": "Object|jqLite|HTMLElement",
          "type": {
            "type": "TypeUnion",
            "elements": [
              {
                "type": "NameExpression",
                "name": "Object"
              },
              {
                "type": "NameExpression",
                "name": "jqLite"
              },
              {
                "type": "NameExpression",
                "name": "HTMLElement"
              }
            ]
          },
          "typeList": [
            "Object",
            "jqLite",
            "HTMLElement"
          ],
          "name": "dom",
          "optional": true
        }
      ],
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Component object. Will return null if no component was found.[/en]\n  [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]",
        "startingLine": 97,
        "typeExpression": "Object",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "typeList": [
          "Object"
        ]
      },
      "description": "[en]Find parent component object of <code>dom</code> element.[/en]\n  [ja]指定されたdom引数の親要素をたどってコンポーネントを検索します。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 106,
      "endingLine": 122,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 106
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "findComponent(selector, [dom])",
            "startingLine": 107
          },
          {
            "tagDef": {
              "name": "extensionOf"
            },
            "tagName": "extensionOf",
            "description": "angular",
            "startingLine": 108
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]CSS selector[/en]\n  [ja]CSSセレクターを指定します。[/ja]",
            "startingLine": 109,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "selector"
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]DOM element to search from.[/en]\n  [ja]検索対象とするDOM要素を指定します。[/ja]",
            "startingLine": 112,
            "typeExpression": "HTMLElement",
            "type": {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            "typeList": [
              "HTMLElement"
            ],
            "name": "dom",
            "optional": true
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Component object. Will return null if no component was found.[/en]\n  [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]",
            "startingLine": 115,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Find component object using CSS selector.[/en]\n  [ja]CSSセレクタを使ってコンポーネントのオブジェクトを検索します。[/ja]",
            "startingLine": 118
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 106
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "findComponent(selector, [dom])",
                "startingLine": 107
              }
            ],
            "extensionOf": [
              {
                "tagDef": {
                  "name": "extensionOf"
                },
                "tagName": "extensionOf",
                "description": "angular",
                "startingLine": 108
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]CSS selector[/en]\n  [ja]CSSセレクターを指定します。[/ja]",
                "startingLine": 109,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "selector"
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]DOM element to search from.[/en]\n  [ja]検索対象とするDOM要素を指定します。[/ja]",
                "startingLine": 112,
                "typeExpression": "HTMLElement",
                "type": {
                  "type": "NameExpression",
                  "name": "HTMLElement"
                },
                "typeList": [
                  "HTMLElement"
                ],
                "name": "dom",
                "optional": true
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Component object. Will return null if no component was found.[/en]\n  [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]",
                "startingLine": 115,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Find component object using CSS selector.[/en]\n  [ja]CSSセレクタを使ってコンポーネントのオブジェクトを検索します。[/ja]",
                "startingLine": 118
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "findComponent(selector, [dom])",
                "startingLine": 107
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "findComponent(selector, [dom])",
      "extensionOf": "angular",
      "name": "findComponent",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]CSS selector[/en]\n  [ja]CSSセレクターを指定します。[/ja]",
          "startingLine": 109,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "selector"
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]DOM element to search from.[/en]\n  [ja]検索対象とするDOM要素を指定します。[/ja]",
          "startingLine": 112,
          "typeExpression": "HTMLElement",
          "type": {
            "type": "NameExpression",
            "name": "HTMLElement"
          },
          "typeList": [
            "HTMLElement"
          ],
          "name": "dom",
          "optional": true
        }
      ],
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Component object. Will return null if no component was found.[/en]\n  [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]",
        "startingLine": 115,
        "typeExpression": "Object",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "typeList": [
          "Object"
        ]
      },
      "description": "[en]Find component object using CSS selector.[/en]\n  [ja]CSSセレクタを使ってコンポーネントのオブジェクトを検索します。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 124,
      "endingLine": 133,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 124
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "setDefaultDeviceBackButtonListener(listener)",
            "startingLine": 125
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Function that executes when device back button is pressed.[/en]\n  [ja]デバイスのバックボタンが押された時に実行される関数オブジェクトを指定します。[/ja]",
            "startingLine": 126,
            "typeExpression": "Function",
            "type": {
              "type": "FunctionType",
              "params": []
            },
            "typeList": [
              "Function"
            ],
            "name": "listener"
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Set default handler for device back button.[/en]\n  [ja]デバイスのバックボタンのためのデフォルトのハンドラを設定します。[/ja]",
            "startingLine": 129
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 124
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "setDefaultDeviceBackButtonListener(listener)",
                "startingLine": 125
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Function that executes when device back button is pressed.[/en]\n  [ja]デバイスのバックボタンが押された時に実行される関数オブジェクトを指定します。[/ja]",
                "startingLine": 126,
                "typeExpression": "Function",
                "type": {
                  "type": "FunctionType",
                  "params": []
                },
                "typeList": [
                  "Function"
                ],
                "name": "listener"
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Set default handler for device back button.[/en]\n  [ja]デバイスのバックボタンのためのデフォルトのハンドラを設定します。[/ja]",
                "startingLine": 129
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "setDefaultDeviceBackButtonListener(listener)",
                "startingLine": 125
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "setDefaultDeviceBackButtonListener(listener)",
      "name": "setDefaultDeviceBackButtonListener",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Function that executes when device back button is pressed.[/en]\n  [ja]デバイスのバックボタンが押された時に実行される関数オブジェクトを指定します。[/ja]",
          "startingLine": 126,
          "typeExpression": "Function",
          "type": {
            "type": "FunctionType",
            "params": []
          },
          "typeList": [
            "Function"
          ],
          "name": "listener"
        }
      ],
      "description": "[en]Set default handler for device back button.[/en]\n  [ja]デバイスのバックボタンのためのデフォルトのハンドラを設定します。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 135,
      "endingLine": 141,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 135
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "disableDeviceBackButtonHandler()",
            "startingLine": 136
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "[en]Disable device back button event handler.[/en]\n[ja]デバイスのバックボタンのイベントを受け付けないようにします。[/ja]",
            "startingLine": 137
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 135
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "disableDeviceBackButtonHandler()",
                "startingLine": 136
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "[en]Disable device back button event handler.[/en]\n[ja]デバイスのバックボタンのイベントを受け付けないようにします。[/ja]",
                "startingLine": 137
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "disableDeviceBackButtonHandler()",
                "startingLine": 136
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "disableDeviceBackButtonHandler()",
      "name": "disableDeviceBackButtonHandler",
      "description": "[en]Disable device back button event handler.[/en]\n[ja]デバイスのバックボタンのイベントを受け付けないようにします。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 143,
      "endingLine": 149,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 143
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "enableDeviceBackButtonHandler()",
            "startingLine": 144
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "[en]Enable device back button event handler.[/en]\n[ja]デバイスのバックボタンのイベントを受け付けるようにします。[/ja]",
            "startingLine": 145
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 143
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "enableDeviceBackButtonHandler()",
                "startingLine": 144
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "[en]Enable device back button event handler.[/en]\n[ja]デバイスのバックボタンのイベントを受け付けるようにします。[/ja]",
                "startingLine": 145
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "enableDeviceBackButtonHandler()",
                "startingLine": 144
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "enableDeviceBackButtonHandler()",
      "name": "enableDeviceBackButtonHandler",
      "description": "[en]Enable device back button event handler.[/en]\n[ja]デバイスのバックボタンのイベントを受け付けるようにします。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 151,
      "endingLine": 160,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 151
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "isReady()",
            "startingLine": 152
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Will be true if Onsen UI is initialized.[/en]\n  [ja]初期化されているかどうかを返します。[/ja]",
            "startingLine": 153,
            "typeExpression": "Boolean",
            "type": {
              "type": "NameExpression",
              "name": "Boolean"
            },
            "typeList": [
              "Boolean"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Returns true if Onsen UI is initialized.[/en]\n  [ja]Onsen UIがすでに初期化されているかどうかを返すメソッドです。[/ja]",
            "startingLine": 156
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 151
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "isReady()",
                "startingLine": 152
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Will be true if Onsen UI is initialized.[/en]\n  [ja]初期化されているかどうかを返します。[/ja]",
                "startingLine": 153,
                "typeExpression": "Boolean",
                "type": {
                  "type": "NameExpression",
                  "name": "Boolean"
                },
                "typeList": [
                  "Boolean"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Returns true if Onsen UI is initialized.[/en]\n  [ja]Onsen UIがすでに初期化されているかどうかを返すメソッドです。[/ja]",
                "startingLine": 156
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "isReady()",
                "startingLine": 152
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "isReady()",
      "name": "isReady",
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Will be true if Onsen UI is initialized.[/en]\n  [ja]初期化されているかどうかを返します。[/ja]",
        "startingLine": 153,
        "typeExpression": "Boolean",
        "type": {
          "type": "NameExpression",
          "name": "Boolean"
        },
        "typeList": [
          "Boolean"
        ]
      },
      "description": "[en]Returns true if Onsen UI is initialized.[/en]\n  [ja]Onsen UIがすでに初期化されているかどうかを返すメソッドです。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 162,
      "endingLine": 172,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 162
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "compile(dom)",
            "startingLine": 163
          },
          {
            "tagDef": {
              "name": "extensionOf"
            },
            "tagName": "extensionOf",
            "description": "angular",
            "startingLine": 164
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Element to compile.[/en]\n  [ja]コンパイルする要素を指定します。[/ja]",
            "startingLine": 165,
            "typeExpression": "HTMLElement",
            "type": {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            "typeList": [
              "HTMLElement"
            ],
            "name": "dom"
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Compile Onsen UI components.[/en]\n  [ja]通常のHTMLの要素をOnsen UIのコンポーネントにコンパイルします。[/ja]",
            "startingLine": 168
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 162
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "compile(dom)",
                "startingLine": 163
              }
            ],
            "extensionOf": [
              {
                "tagDef": {
                  "name": "extensionOf"
                },
                "tagName": "extensionOf",
                "description": "angular",
                "startingLine": 164
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Element to compile.[/en]\n  [ja]コンパイルする要素を指定します。[/ja]",
                "startingLine": 165,
                "typeExpression": "HTMLElement",
                "type": {
                  "type": "NameExpression",
                  "name": "HTMLElement"
                },
                "typeList": [
                  "HTMLElement"
                ],
                "name": "dom"
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Compile Onsen UI components.[/en]\n  [ja]通常のHTMLの要素をOnsen UIのコンポーネントにコンパイルします。[/ja]",
                "startingLine": 168
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "compile(dom)",
                "startingLine": 163
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "compile(dom)",
      "extensionOf": "angular",
      "name": "compile",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Element to compile.[/en]\n  [ja]コンパイルする要素を指定します。[/ja]",
          "startingLine": 165,
          "typeExpression": "HTMLElement",
          "type": {
            "type": "NameExpression",
            "name": "HTMLElement"
          },
          "typeList": [
            "HTMLElement"
          ],
          "name": "dom"
        }
      ],
      "description": "[en]Compile Onsen UI components.[/en]\n  [ja]通常のHTMLの要素をOnsen UIのコンポーネントにコンパイルします。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 174,
      "endingLine": 183,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 174
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "isWebView()",
            "startingLine": 175
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Will be true if the app is running in Cordova.[/en]\n  [ja]Cordovaで実行されている場合にtrueになります。[/ja]",
            "startingLine": 176,
            "typeExpression": "Boolean",
            "type": {
              "type": "NameExpression",
              "name": "Boolean"
            },
            "typeList": [
              "Boolean"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Returns true if running inside Cordova.[/en]\n  [ja]Cordovaで実行されているかどうかを返すメソッドです。[/ja]",
            "startingLine": 179
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 174
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "isWebView()",
                "startingLine": 175
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Will be true if the app is running in Cordova.[/en]\n  [ja]Cordovaで実行されている場合にtrueになります。[/ja]",
                "startingLine": 176,
                "typeExpression": "Boolean",
                "type": {
                  "type": "NameExpression",
                  "name": "Boolean"
                },
                "typeList": [
                  "Boolean"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Returns true if running inside Cordova.[/en]\n  [ja]Cordovaで実行されているかどうかを返すメソッドです。[/ja]",
                "startingLine": 179
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "isWebView()",
                "startingLine": 175
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "isWebView()",
      "name": "isWebView",
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Will be true if the app is running in Cordova.[/en]\n  [ja]Cordovaで実行されている場合にtrueになります。[/ja]",
        "startingLine": 176,
        "typeExpression": "Boolean",
        "type": {
          "type": "NameExpression",
          "name": "Boolean"
        },
        "typeList": [
          "Boolean"
        ]
      },
      "description": "[en]Returns true if running inside Cordova.[/en]\n  [ja]Cordovaで実行されているかどうかを返すメソッドです。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 185,
      "endingLine": 203,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 185
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "createAlertDialog(page, [options])",
            "startingLine": 186
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-alert-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
            "startingLine": 187,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "page"
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
            "startingLine": 190,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ],
            "name": "options",
            "optional": true
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
            "startingLine": 193,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ],
            "name": "options.parentScope",
            "optional": true
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Promise object that resolves to the alert dialog component object.[/en]\n  [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
            "startingLine": 196,
            "typeExpression": "Promise",
            "type": {
              "type": "NameExpression",
              "name": "Promise"
            },
            "typeList": [
              "Promise"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Create a alert dialog instance from a template.[/en]\n  [ja]テンプレートからアラートダイアログのインスタンスを生成します。[/ja]",
            "startingLine": 199
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 185
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "createAlertDialog(page, [options])",
                "startingLine": 186
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-alert-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
                "startingLine": 187,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "page"
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
                "startingLine": 190,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ],
                "name": "options",
                "optional": true
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
                "startingLine": 193,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ],
                "name": "options.parentScope",
                "optional": true
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Promise object that resolves to the alert dialog component object.[/en]\n  [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
                "startingLine": 196,
                "typeExpression": "Promise",
                "type": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "typeList": [
                  "Promise"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Create a alert dialog instance from a template.[/en]\n  [ja]テンプレートからアラートダイアログのインスタンスを生成します。[/ja]",
                "startingLine": 199
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "createAlertDialog(page, [options])",
                "startingLine": 186
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "createAlertDialog(page, [options])",
      "name": "createAlertDialog",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-alert-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
          "startingLine": 187,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "page"
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
          "startingLine": 190,
          "typeExpression": "Object",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "typeList": [
            "Object"
          ],
          "name": "options",
          "optional": true
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
          "startingLine": 193,
          "typeExpression": "Object",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "typeList": [
            "Object"
          ],
          "name": "options.parentScope",
          "optional": true
        }
      ],
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Promise object that resolves to the alert dialog component object.[/en]\n  [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
        "startingLine": 196,
        "typeExpression": "Promise",
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        },
        "typeList": [
          "Promise"
        ]
      },
      "description": "[en]Create a alert dialog instance from a template.[/en]\n  [ja]テンプレートからアラートダイアログのインスタンスを生成します。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 205,
      "endingLine": 223,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 205
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "createDialog(page, [options])",
            "startingLine": 206
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
            "startingLine": 207,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "page"
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
            "startingLine": 210,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ],
            "name": "options",
            "optional": true
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
            "startingLine": 213,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ],
            "name": "options.parentScope",
            "optional": true
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Promise object that resolves to the dialog component object.[/en]\n  [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
            "startingLine": 216,
            "typeExpression": "Promise",
            "type": {
              "type": "NameExpression",
              "name": "Promise"
            },
            "typeList": [
              "Promise"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Create a dialog instance from a template.[/en]\n  [ja]テンプレートからダイアログのインスタンスを生成します。[/ja]",
            "startingLine": 219
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 205
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "createDialog(page, [options])",
                "startingLine": 206
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
                "startingLine": 207,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "page"
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
                "startingLine": 210,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ],
                "name": "options",
                "optional": true
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
                "startingLine": 213,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ],
                "name": "options.parentScope",
                "optional": true
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Promise object that resolves to the dialog component object.[/en]\n  [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
                "startingLine": 216,
                "typeExpression": "Promise",
                "type": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "typeList": [
                  "Promise"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Create a dialog instance from a template.[/en]\n  [ja]テンプレートからダイアログのインスタンスを生成します。[/ja]",
                "startingLine": 219
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "createDialog(page, [options])",
                "startingLine": 206
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "createDialog(page, [options])",
      "name": "createDialog",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
          "startingLine": 207,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "page"
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
          "startingLine": 210,
          "typeExpression": "Object",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "typeList": [
            "Object"
          ],
          "name": "options",
          "optional": true
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
          "startingLine": 213,
          "typeExpression": "Object",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "typeList": [
            "Object"
          ],
          "name": "options.parentScope",
          "optional": true
        }
      ],
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Promise object that resolves to the dialog component object.[/en]\n  [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
        "startingLine": 216,
        "typeExpression": "Promise",
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        },
        "typeList": [
          "Promise"
        ]
      },
      "description": "[en]Create a dialog instance from a template.[/en]\n  [ja]テンプレートからダイアログのインスタンスを生成します。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 225,
      "endingLine": 243,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 225
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "createPopover(page, [options])",
            "startingLine": 226
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
            "startingLine": 227,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "page"
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
            "startingLine": 230,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ],
            "name": "options",
            "optional": true
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
            "startingLine": 233,
            "typeExpression": "Object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "typeList": [
              "Object"
            ],
            "name": "options.parentScope",
            "optional": true
          },
          {
            "tagDef": {
              "name": "returns",
              "aliases": [
                "return"
              ],
              "transforms": [
                null,
                null
              ]
            },
            "tagName": "return",
            "description": "[en]Promise object that resolves to the popover component object.[/en]\n  [ja]ポップオーバーのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
            "startingLine": 236,
            "typeExpression": "Promise",
            "type": {
              "type": "NameExpression",
              "name": "Promise"
            },
            "typeList": [
              "Promise"
            ]
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]Create a popover instance from a template.[/en]\n  [ja]テンプレートからポップオーバーのインスタンスを生成します。[/ja]",
            "startingLine": 239
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 225
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "createPopover(page, [options])",
                "startingLine": 226
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
                "startingLine": 227,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "page"
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
                "startingLine": 230,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ],
                "name": "options",
                "optional": true
              },
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
                "startingLine": 233,
                "typeExpression": "Object",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "typeList": [
                  "Object"
                ],
                "name": "options.parentScope",
                "optional": true
              }
            ],
            "returns": [
              {
                "tagDef": {
                  "name": "returns",
                  "aliases": [
                    "return"
                  ],
                  "transforms": [
                    null,
                    null
                  ]
                },
                "tagName": "return",
                "description": "[en]Promise object that resolves to the popover component object.[/en]\n  [ja]ポップオーバーのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
                "startingLine": 236,
                "typeExpression": "Promise",
                "type": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "typeList": [
                  "Promise"
                ]
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]Create a popover instance from a template.[/en]\n  [ja]テンプレートからポップオーバーのインスタンスを生成します。[/ja]",
                "startingLine": 239
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "createPopover(page, [options])",
                "startingLine": 226
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "createPopover(page, [options])",
      "name": "createPopover",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
          "startingLine": 227,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "page"
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Parameter object.[/en]\n  [ja]オプションを指定するオブジェクト。[/ja]",
          "startingLine": 230,
          "typeExpression": "Object",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "typeList": [
            "Object"
          ],
          "name": "options",
          "optional": true
        },
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]\n  [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]",
          "startingLine": 233,
          "typeExpression": "Object",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "typeList": [
            "Object"
          ],
          "name": "options.parentScope",
          "optional": true
        }
      ],
      "returns": {
        "tagDef": {
          "name": "returns",
          "aliases": [
            "return"
          ],
          "transforms": [
            null,
            null
          ]
        },
        "tagName": "return",
        "description": "[en]Promise object that resolves to the popover component object.[/en]\n  [ja]ポップオーバーのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]",
        "startingLine": 236,
        "typeExpression": "Promise",
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        },
        "typeList": [
          "Promise"
        ]
      },
      "description": "[en]Create a popover instance from a template.[/en]\n  [ja]テンプレートからポップオーバーのインスタンスを生成します。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    },
    {
      "fileInfo": {
        "baseName": "onsen",
        "extension": "js"
      },
      "startingLine": 245,
      "endingLine": 254,
      "codeAncestors": [],
      "docType": "method",
      "tags": {
        "tags": [
          {
            "tagDef": {
              "name": "ngdoc",
              "required": true,
              "docProperty": "docType"
            },
            "tagName": "ngdoc",
            "description": "method",
            "startingLine": 245
          },
          {
            "tagDef": {
              "name": "signature",
              "priority": 100
            },
            "tagName": "signature",
            "description": "resolveLoadingPlaceholder(page)",
            "startingLine": 246
          },
          {
            "tagDef": {
              "name": "param",
              "multi": true,
              "docProperty": "params",
              "transforms": [
                null,
                null,
                null
              ]
            },
            "tagName": "param",
            "description": "[en]Page name. Can be either an HTML file or an <ons-template> element.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
            "startingLine": 247,
            "typeExpression": "String",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "typeList": [
              "String"
            ],
            "name": "page"
          },
          {
            "tagDef": {
              "name": "description"
            },
            "tagName": "description",
            "description": "  [en]If no page is defined for the `ons-loading-placeholder` attribute it will wait for this method being called before loading the page.[/en]\n  [ja]ons-loading-placeholderの属性値としてページが指定されていない場合は、ページロード前に呼ばれるons.resolveLoadingPlaceholder処理が行われるまで表示されません。[/ja]",
            "startingLine": 250
          }
        ],
        "tagsByName": {
          "obj": {
            "ngdoc": [
              {
                "tagDef": {
                  "name": "ngdoc",
                  "required": true,
                  "docProperty": "docType"
                },
                "tagName": "ngdoc",
                "description": "method",
                "startingLine": 245
              }
            ],
            "signature": [
              {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "resolveLoadingPlaceholder(page)",
                "startingLine": 246
              }
            ],
            "param": [
              {
                "tagDef": {
                  "name": "param",
                  "multi": true,
                  "docProperty": "params",
                  "transforms": [
                    null,
                    null,
                    null
                  ]
                },
                "tagName": "param",
                "description": "[en]Page name. Can be either an HTML file or an <ons-template> element.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
                "startingLine": 247,
                "typeExpression": "String",
                "type": {
                  "type": "NameExpression",
                  "name": "String"
                },
                "typeList": [
                  "String"
                ],
                "name": "page"
              }
            ],
            "description": [
              {
                "tagDef": {
                  "name": "description"
                },
                "tagName": "description",
                "description": "  [en]If no page is defined for the `ons-loading-placeholder` attribute it will wait for this method being called before loading the page.[/en]\n  [ja]ons-loading-placeholderの属性値としてページが指定されていない場合は、ページロード前に呼ばれるons.resolveLoadingPlaceholder処理が行われるまで表示されません。[/ja]",
                "startingLine": 250
              }
            ],
            "name": {
              "0": {
                "tagDef": {
                  "name": "signature",
                  "priority": 100
                },
                "tagName": "signature",
                "description": "resolveLoadingPlaceholder(page)",
                "startingLine": 246
              },
              "tagName": "name"
            }
          },
          "hasProto": false
        },
        "badTags": [],
        "description": ""
      },
      "signature": "resolveLoadingPlaceholder(page)",
      "name": "resolveLoadingPlaceholder",
      "params": [
        {
          "tagDef": {
            "name": "param",
            "multi": true,
            "docProperty": "params",
            "transforms": [
              null,
              null,
              null
            ]
          },
          "tagName": "param",
          "description": "[en]Page name. Can be either an HTML file or an <ons-template> element.[/en]\n  [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]",
          "startingLine": 247,
          "typeExpression": "String",
          "type": {
            "type": "NameExpression",
            "name": "String"
          },
          "typeList": [
            "String"
          ],
          "name": "page"
        }
      ],
      "description": "[en]If no page is defined for the `ons-loading-placeholder` attribute it will wait for this method being called before loading the page.[/en]\n  [ja]ons-loading-placeholderの属性値としてページが指定されていない場合は、ページロード前に呼ばれるons.resolveLoadingPlaceholder処理が行われるまで表示されません。[/ja]",
      "area": "api",
      "module": "..",
      "priority": 0,
      "codeName": null
    }
  ],
  "events": [],
  "id": "module:...object:ons",
  "aliases": [
    "ons",
    "object:ons",
    "...ons",
    "module:...ons",
    "...object:ons",
    "module:...object:ons"
  ],
  "path": "api/../object/ons",
  "outputPath": "partials/api/../object/ons.html"
}